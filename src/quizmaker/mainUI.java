/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package quizmaker;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;

/**
 *
 * @author Steven
 */
public class mainUI extends javax.swing.JFrame {

    //new components
    public ArrayList<String> quizData = new ArrayList<>();
    public ArrayList<String> quizMissed = new ArrayList<>();
    public int questionNum = 0,correct,wrong;
    public int questionId = 1;
    public int termId = 0;
    public String quizFile;
    public String strQuestions = "<html> Questions Missed <p>";
    public String strAnswers = "<html> Answers <p>";
    /**
     * Creates new form mainUI
     */
    public mainUI() throws FileNotFoundException, IOException {
        initComponents();

        //generateQuiz("defQuiz");//for default quiz
        generateQuiz("chap1.txt");
        quizFile = "chap1.txt";
        //resetButton.setVisible(false);
        hideChoices();
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Question = new javax.swing.JLabel();
        Ans2 = new javax.swing.JButton();
        Ans1 = new javax.swing.JButton();
        Ans3 = new javax.swing.JButton();
        Ans4 = new javax.swing.JButton();
        CorrectLabel = new javax.swing.JLabel();
        choiceToggle = new javax.swing.JToggleButton();
        resetButton = new javax.swing.JButton();
        endquizButton = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        defBox = new javax.swing.JCheckBoxMenuItem();
        termBox = new javax.swing.JCheckBoxMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        Question.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        Question.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Question.setText("jLabel1");
        Question.setPreferredSize(new java.awt.Dimension(300, 32));

        Ans2.setText("jButton1");
        Ans2.setPreferredSize(new java.awt.Dimension(200, 64));
        Ans2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Ans2ActionPerformed(evt);
            }
        });

        Ans1.setText("jButton1");
        Ans1.setPreferredSize(new java.awt.Dimension(200, 64));
        Ans1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Ans1ActionPerformed(evt);
            }
        });

        Ans3.setText("jButton1");
        Ans3.setPreferredSize(new java.awt.Dimension(200, 64));
        Ans3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Ans3ActionPerformed(evt);
            }
        });

        Ans4.setText("jButton1");
        Ans4.setPreferredSize(new java.awt.Dimension(200, 64));
        Ans4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Ans4ActionPerformed(evt);
            }
        });

        CorrectLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        CorrectLabel.setText("jLabel1");
        CorrectLabel.setPreferredSize(new java.awt.Dimension(300, 32));

        choiceToggle.setText("Show / Hide Choices");
        choiceToggle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                choiceToggleActionPerformed(evt);
            }
        });

        resetButton.setText("Reset Quiz");
        resetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetButtonActionPerformed(evt);
            }
        });

        endquizButton.setText("End Quiz");
        endquizButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                endquizButtonActionPerformed(evt);
            }
        });

        jMenu1.setText("File");

        jMenuItem1.setText("Open");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");

        defBox.setText("Ask for definition");
        defBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                defBoxActionPerformed(evt);
            }
        });
        jMenu2.add(defBox);

        termBox.setSelected(true);
        termBox.setText("Ask for term");
        termBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                termBoxActionPerformed(evt);
            }
        });
        jMenu2.add(termBox);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(95, 95, 95)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(Question, javax.swing.GroupLayout.PREFERRED_SIZE, 406, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(CorrectLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(Ans1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(Ans3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(Ans4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(Ans2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(240, 240, 240)
                        .addComponent(choiceToggle))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(204, 204, 204)
                        .addComponent(resetButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(endquizButton)))
                .addContainerGap(99, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(resetButton)
                    .addComponent(endquizButton))
                .addGap(16, 16, 16)
                .addComponent(Question, javax.swing.GroupLayout.DEFAULT_SIZE, 101, Short.MAX_VALUE)
                .addGap(35, 35, 35)
                .addComponent(choiceToggle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Ans2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Ans1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Ans3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Ans4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addComponent(CorrectLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(54, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        JFileChooser chooser = new JFileChooser();
        chooser.showOpenDialog(null);
        File f = chooser.getSelectedFile();
        String filename = f.getAbsolutePath();
        quizFile = filename;
        try {
            generateQuiz(filename);
        } catch (IOException ex) {
            Logger.getLogger(mainUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void Ans1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Ans1ActionPerformed
        try {
            checkAnswer(evt.getActionCommand());
        } catch (IOException ex) {
            Logger.getLogger(mainUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        hideChoices();
        
    }//GEN-LAST:event_Ans1ActionPerformed

    private void Ans2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Ans2ActionPerformed
        try {
            checkAnswer(evt.getActionCommand());
        } catch (IOException ex) {
            Logger.getLogger(mainUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        hideChoices();
    }//GEN-LAST:event_Ans2ActionPerformed

    private void Ans3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Ans3ActionPerformed
        try {
            checkAnswer(evt.getActionCommand());
        } catch (IOException ex) {
            Logger.getLogger(mainUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        hideChoices();
    }//GEN-LAST:event_Ans3ActionPerformed

    private void Ans4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Ans4ActionPerformed
        try {
            checkAnswer(evt.getActionCommand());
        } catch (IOException ex) {
            Logger.getLogger(mainUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        hideChoices();
    }//GEN-LAST:event_Ans4ActionPerformed

    private void defBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_defBoxActionPerformed
        termBox.setState(false);
        questionId = 0;
        termId = 1;
        try {
            generateQuiz(quizFile);
        } catch (IOException ex) {
            Logger.getLogger(mainUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        hideChoices();

    }//GEN-LAST:event_defBoxActionPerformed

    private void termBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_termBoxActionPerformed
        defBox.setState(false);
        questionId = 1;
        termId = 0;
        try {
            generateQuiz(quizFile);
        } catch (IOException ex) {
            Logger.getLogger(mainUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        hideChoices();
    }//GEN-LAST:event_termBoxActionPerformed

    private void choiceToggleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_choiceToggleActionPerformed
       if (choiceToggle.isSelected())
       {
           Ans1.setVisible(true);
           Ans2.setVisible(true);
           Ans3.setVisible(true);
           Ans4.setVisible(true);
       }
       else
       {
           Ans1.setVisible(false);
           Ans2.setVisible(false);
           Ans3.setVisible(false);
           Ans4.setVisible(false);
       }
    }//GEN-LAST:event_choiceToggleActionPerformed

    private void resetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetButtonActionPerformed
        try {
            generateQuiz(quizFile);
        } catch (IOException ex) {
            Logger.getLogger(mainUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        choiceToggle.setVisible(true);
        Ans1.setVisible(false);
        Ans2.setVisible(false);
        Ans3.setVisible(false);
        Ans4.setVisible(false);
    }//GEN-LAST:event_resetButtonActionPerformed

    private void endquizButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_endquizButtonActionPerformed
        strQuestions = "<html>";
            strAnswers = "<html> Answers <p>";
            JFrame frameWrong = new JFrame("Review questions you missed");
            JLabel questions = new JLabel("Questions missed");
            JLabel answers = new JLabel("Answers");
        try {
            makeMissedFile();
        } catch (IOException ex) {
            Logger.getLogger(mainUI.class.getName()).log(Level.SEVERE, null, ex);
        }

            for (int k=0;k<quizMissed.size();k++)
            {
                //strQuestions += "<p>" +quizMissed.get(k).split(":")[0];
                strQuestions += "<p>" +quizMissed.get(k).split(":")[0] + "- - -" +quizMissed.get(k).split(":")[1] + "<p>";
                //strAnswers += "<p>" + quizMissed.get(k).split(":")[1];
            }
            strQuestions += "</html>";
            strAnswers += "</html>";
            
            //test
            strAnswers = "";
            questions.setText(strQuestions);
            answers.setText(strAnswers);
            //frameWrong.setLayout(null);
            //questions.setBounds(0,0,600,500);
            //answers.setBounds(300,-180,600,500);
            frameWrong.add(questions);
            //frameWrong.add(answers);

            try {
                generateQuiz("defQuiz");
            } catch (IOException ex) {
                Logger.getLogger(mainUI.class.getName()).log(Level.SEVERE, null, ex);
            }
            choiceToggle.setVisible(false);
            resetButton.setVisible(true);
            frameWrong.setSize(600,500);
            frameWrong.setVisible(true);
            
            
            //quizData = new ArrayList<>();
            quizMissed = new ArrayList<>();
            hideChoices();
    }//GEN-LAST:event_endquizButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(mainUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(mainUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(mainUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(mainUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new mainUI().setVisible(true);
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(mainUI.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(mainUI.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Ans1;
    private javax.swing.JButton Ans2;
    private javax.swing.JButton Ans3;
    private javax.swing.JButton Ans4;
    private javax.swing.JLabel CorrectLabel;
    private javax.swing.JLabel Question;
    private javax.swing.JToggleButton choiceToggle;
    private javax.swing.JCheckBoxMenuItem defBox;
    private javax.swing.JButton endquizButton;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JButton resetButton;
    private javax.swing.JCheckBoxMenuItem termBox;
    // End of variables declaration//GEN-END:variables

    private void setQuiz() throws IOException {
        CorrectLabel.setText(String.valueOf(correct) + " / " + String.valueOf(quizData.size()) + " Correct               "  +
                String.valueOf(Math.rint(Float.valueOf(correct) / quizData.size() * 100.0f)) + "%") ;
                //String.valueOf(wrong) + " / " + String.valueOf(quizData.size()) + " Wrong      ");
        if (questionNum < quizData.size() )
        {
            //Question.setText(quizData.get(questionNum).split(":")[questionId]);
            Question.setText("<html>"+ quizData.get(questionNum).split(":")[questionId] + "</html>");
        
        
        
        int num1,num2,num3,num4 = 0;
        num1 = (int) (Math.random()*quizData.size());
        num2 = (int) (Math.random()*quizData.size());
        num3 = (int) (Math.random()*quizData.size());
        num4 = (int) (Math.random()*quizData.size());
        
        while (num1 == num2)
            num2 = (int) (Math.random()*4);
        while (num1 == num3 || num2 == num3)    
            num3 = (int) (Math.random()*4);
        while (num1 == num4 || num2 == num4 || num3 == num4)
            num4 = (int) (Math.random()*4);

        if (num1 != questionNum &&  num2 != questionNum && num3 != questionNum && num4 != questionNum)
        {
            //System.out.println("need new number");
            int randAns = (int) (Math.random() *4);
            if (randAns == 1)
                num1 = questionNum;
            else if (randAns == 2)
                num2 = questionNum;
            else if (randAns == 3)
                num3 = questionNum;
            else num4 = questionNum;
                
        }
        
        Ans1.setText(quizData.get(num1).split(":")[termId]);
        Ans2.setText(quizData.get(num2).split(":")[termId]);
        Ans3.setText(quizData.get(num3).split(":")[termId]);
        Ans4.setText(quizData.get(num4).split(":")[termId]);
        
        
        
    }
        else
            
        {
            //strQuestions = "<html> Questions Missed <p>";
            strQuestions = "<html>";
            strAnswers = "<html> Answers <p>";
            JFrame frameWrong = new JFrame("Review questions you missed");
            JLabel questions = new JLabel("Questions missed");
            JLabel answers = new JLabel("Answers");
            makeMissedFile();

            for (int k=0;k<quizMissed.size();k++)
            {
                //strQuestions += "<p>" +quizMissed.get(k).split(":")[0];
                strQuestions += "<p>" +quizMissed.get(k).split(":")[0] + "- - -" +quizMissed.get(k).split(":")[1] + "<p>";
                //strAnswers += "<p>" + quizMissed.get(k).split(":")[1];
            }
            strQuestions += "</html>";
            strAnswers += "</html>";
            
            //test
            strAnswers = "";
            questions.setText(strQuestions);
            answers.setText(strAnswers);
            //frameWrong.setLayout(null);
            //questions.setBounds(0,0,600,500);
            //answers.setBounds(300,-180,600,500);
            frameWrong.add(questions);
            //frameWrong.add(answers);

            try {
                generateQuiz("defQuiz");
            } catch (IOException ex) {
                Logger.getLogger(mainUI.class.getName()).log(Level.SEVERE, null, ex);
            }
            choiceToggle.setVisible(false);
            resetButton.setVisible(true);
            frameWrong.setSize(600,500);
            frameWrong.setVisible(true);
            
            
            //quizData = new ArrayList<>();
            quizMissed = new ArrayList<>();
            hideChoices();
        }
    }

    private void checkAnswer(String answer) throws IOException {
        if (answer.equals(quizData.get(questionNum).split(":")[termId]))
            correct++;
        else
        {
            wrong++;
            quizMissed.add(quizData.get(questionNum));
        }
        //Collections.shuffle(quizData);
        if (questionNum < quizData.size())
        {
            questionNum ++;
            setQuiz();

        }
        else System.out.println("end");
    }

    private void generateQuiz(String file) throws FileNotFoundException, IOException {
        //quizData = new ArrayList<>();
        quizData.clear();
        correct = 0;
        wrong = 0;
        questionNum = 0;
        if (file.equals("defQuiz"))
        {
            Question.setVisible(false);
            Ans1.setVisible(false);
            Ans2.setVisible(false);
            Ans3.setVisible(false);
            Ans4.setVisible(false);
            CorrectLabel.setVisible(false);
            
        }
        else
        {
            FileReader inFile = new FileReader(file);
        BufferedReader infile = new BufferedReader(inFile);
        
        String myLine;
        while ((myLine = infile.readLine())!=null)
        {
            quizData.add(myLine);
        }
        inFile.close();
        infile.close();
        
        
        Collections.shuffle(quizData);
        
        Question.setVisible(true);
        Ans1.setVisible(true);
        Ans2.setVisible(true);
        Ans3.setVisible(true);
        Ans4.setVisible(true);
        CorrectLabel.setVisible(true);
        setQuiz();
        }
    }

    private void hideChoices() {
        choiceToggle.setSelected(false);
        Ans1.setVisible(false);
        Ans2.setVisible(false);
        Ans3.setVisible(false);
        Ans4.setVisible(false);
    }

    private void makeMissedFile() throws IOException {
        //while (quizMissed.size() < 4)
            //quizMissed.add(String.valueOf(quizMissed.size()) + ":" + String.valueOf(quizMissed.size() + 1));
        FileWriter outFile = new FileWriter("Missed.txt");
        
        for (int k=0;k<quizMissed.size();k++)
        {
            outFile.append(quizMissed.get(k) + System.getProperty("line.separator"));
        }
        outFile.close();
    }
}
